<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd">
	
  	<mvc:annotation-driven />	
	<mvc:default-servlet-handler/>
	<!-- 在这里启用转换器 -->
	<!-- <mvc:annotation-driven conversion-service="conversionService" /> -->
	
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 设置使用注解的类所在的jar包 -->
	<context:component-scan base-package="com.znsd.client" />

	<!-- 定义自定义类型转换器的bean -->
	<!-- <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="com.znsd.client.convert.DateConvert"></bean>
			</list>
			<set> 这里是我们自己定义的类型转换器 注意，这里首字母要小写，因为springmvc帮我们创建bean的时候，是以类名首字母小写命名 <ref bean="userConvert" /> </set>
		</property>
	</bean> -->
	

	<!-- 配置拦截器 -->
	<!-- 	
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/addResource" />必须配置在bean的前面
			<bean class="com.znsd.client.interceptor.ResourceInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors> 
	-->

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- mybatis session工厂 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:com/znsd/client/dao/*.xml" />
		<property name="typeAliasesPackage" value="com.znsd.client" />
	</bean>

	<!-- mybatis 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- mybatis 接口包路径 （如果有多个可以用,逗号隔开） -->
		<property name="basePackage" value="com.znsd.client.dao" />
		<!-- sqlSession工厂beanId -->
		<property name="sqlSessionFactoryBeanName" value="sessionFactory" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>
	
	<!-- 定义事务管理器（声明式的事务） -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- mybatis spring sqlSessionTemplate 使用是直接通过构造注入sessionFactory即可 <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> 
		<constructor-arg index="0" ref="sessionFactory"></constructor-arg> </bean> -->
	<!-- 开启注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
</beans>